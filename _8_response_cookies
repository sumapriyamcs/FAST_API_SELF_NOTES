'''
1.Use a Response parameter:

You can declare a parameter of type Response in your path operation function.

And then you can set cookies in that temporal response object.

from fastapi import FastAPI, Response


app = FastAPI()


@app.post("/cookie-and-object/")
def create_cookie(response: Response):

    response.set_cookie(key="fakesession", value="fake-cookie-session-value")

    return {"message": "Come to the dark side, we have cookies"}

And then you can return any object you need, as you normally would (a dict, a database model, etc).

And if you declared a response_model, it will still be used to filter and convert the object you returned.

FastAPI will use that temporal response to extract the cookies (also headers and status code),
and will put them in the final response that contains the value you returned, filtered by any response_model.
You can also declare the Response parameter in dependencies, and set cookies (and headers) in them.

2.Return a Response directly:

You can also create cookies when returning a Response directly in your code.

To do that, you can create a response as described in Return a Response Directly.

Then set Cookies in it, and then return it:

from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()


@app.post("/cookie/")
def create_cookie():
    content = {"message": "Come to the dark side, we have cookies"}

    response = JSONResponse(content=content)

    response.set_cookie(key="fakesession", value="fake-cookie-session-value")

    return response




'''