The first step is to install FastAPI.

        pip install "fastapi[all]"

Also install uvicorn to work as the server:

    pip install "uvicorn[standard]"

uvicorn - for the server that loads and serves your application

1.features of fastapi:

OpenAPI for API creation, including declarations of path operations, parameters, body requests, security, etc.
Automatic data model documentation with JSON Schema (as OpenAPI itself is based on JSON Schema).
Designed around these standards, after a meticulous study. Instead of an afterthought layer on top.
This also allows using automatic client code generation in many languages.


2.Automatic docs:

Interactive API documentation and exploration web user interfaces. As the framework is based on OpenAPI, there are multiple options, 2 included by default.

Swagger UI, with interactive exploration, call and test your API directly from the browser.
Alternative API documentation with ReDoc


3.Pydantic features:

    FastAPI is fully compatible with (and based on) Pydantic. So, any additional Pydantic code you have,
     will also work.

    Including external libraries also based on Pydantic, as ORMs, ODMs for databases.

    This also means that in many cases you can pass the same object you get from a request directly to the database, as everything is validated automatically.

    The same applies the other way around, in many cases you can just pass the object you get from the database directly to the client.

    With FastAPI you get all of Pydantic's features (as FastAPI is based on Pydantic for all the data handling)

No brainfuck:
    No new schema definition micro-language to learn.
    If you know Python types you know how to use Pydantic.

Plays nicely with your IDE/linter/brain:
    Because pydantic data structures are just instances of classes you define; auto-completion, linting, mypy and your intuition should all work properly with your validated data.

Fast:

    in benchmarks Pydantic is faster than all other tested libraries.

Validate complex structures:
    Use of hierarchical Pydantic models, Python typingâ€™s List and Dict, etc.
    And validators allow complex data schemas to be clearly and easily defined, checked and documented as JSON Schema.
    You can have deeply nested JSON objects and have them all validated and annotated.

Extendible:

    Pydantic allows custom data types to be defined or you can extend validation with methods on a model decorated with the validator decorator.
    100% test coverage.

4.Starlette features:

    FastAPI is fully compatible with (and based on) Starlette. So, any additional Starlette code you have, will also work.

    FastAPI is actually a sub-class of Starlette. So, if you already know or use Starlette, most of the functionality will work the same way.

    With FastAPI you get all of Starlette's features (as FastAPI is just Starlette on steroids):

    Seriously impressive performance. It is one of the fastest Python frameworks available, on par with NodeJS and Go.
    WebSocket support.
    In-process background tasks.
    Startup and shutdown events.
    Test client built on requests.
    CORS, GZip, Static Files, Streaming responses.
    Session and Cookie support.
    100% test coverage.
    100% type annotated codebase.