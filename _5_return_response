'''
1.return a response directly:
When you create a FastAPI path operation you can normally return any data from it: 
a dict, a list, a Pydantic model, a database model, etc.

By default, FastAPI would automatically convert that return value to JSON using the jsonable_encoder

you can return any Response or any sub-class of it.

JSONResponse itself is a sub-class of Response.

And when you return a Response, FastAPI will pass it directly.

It won't do any data conversion with Pydantic models, it won't convert the contents to any type, etc.

This gives you a lot of flexibility. You can return any data type, override
any data declaration or validation, etc.

2.Using the jsonable_encoder in a Response:

Because FastAPI doesn't do any change to a Response you return, you have to make sure it's 
contents are ready for it.

For example, you cannot put a Pydantic model in a JSONResponse without first converting it to a dict with all
the data types (like datetime, UUID, etc) converted to JSON-compatible types.


For those cases, you can use the jsonable_encoder to convert your data before passing it to a response


'''



from datetime import datetime
from typing import Optional

from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder

from fastapi.responses import JSONResponse

from pydantic import BaseModel



class Item(BaseModel):
    title: str
    timestamp: datetime
    description: Optional[str] = None


app = FastAPI()


@app.put("/items/{id}")
def update_item(id: str, item: Item):

    json_compatible_item_data = jsonable_encoder(item)

    return JSONResponse(content=json_compatible_item_data)

'''
2.returning a custom response:

as you could have just returned the item directly, and FastAPI would put it in a 
JSONResponse for you, converting it to a dict, etc. All that by default.
You could put your XML content in a string, put it in a Response, and return it:

'''

from fastapi import FastAPI, Response


app = FastAPI()


@app.get("/legacy/")
def get_legacy_data():
    data = """<?xml version="1.0"?>
    <shampoo>
    <Header>
        Apply shampoo here.
    </Header>
    <Body>
        You'll have to use soap here.
    </Body>
    </shampoo>
    """

    return Response(content=data, media_type="application/xml")

